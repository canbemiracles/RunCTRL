<?php

namespace AssignmentsBundle\Repository\Assignment;

use ApiBundle\Entity\Branch;
use ApiBundle\Entity\BranchShift;
use ApiBundle\Entity\BranchStation;
use ApiBundle\Entity\Employee;
use ApiBundle\Entity\Role\AbstractBranchStationRole;

/**
 * HistoryProblemTaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoryProblemTaskRepository extends \Doctrine\ORM\EntityRepository
{
    public function getEmployeeProblemTasksByMonth(Employee $employee)
    {
        $qb = $this->createQueryBuilder('HistoryProblemTask');
        $qb
            ->select('count(HistoryProblemTask.id)')
            ->where('HistoryProblemTask.employee = :employee')
            ->andWhere('MONTH(HistoryProblemTask.createdAt) = MONTH(CURRENT_DATE())')
            ->setParameter('employee', $employee);

        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }

    public function getProblemsTasksByRole(AbstractBranchStationRole $role, BranchShift $shift)
    {
        $qb = $this->createQueryBuilder('HistoryProblemTask');
        $qb->innerJoin('HistoryProblemTask.assignment', 'a');
        $qb
            ->where('a.role = :role')
            ->andWhere('HistoryProblemTask.branch_shift = :shift')
            ->andWhere('DATE(HistoryProblemTask.createdAt) = DATE(CURRENT_DATE())')
            ->setParameter('role', $role)
            ->setParameter('shift', $shift);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getProblemsTasksByEmployee(Employee $employee, BranchShift $shift)
    {
        $qb = $this->createQueryBuilder('HistoryProblemTask');
        $qb->innerJoin('HistoryProblemTask.assignment', 'a');
        $qb
            ->where('HistoryProblemTask.employee = :employee')
            ->andWhere('HistoryProblemTask.branch_shift = :shift')
            ->andWhere('DATE(HistoryProblemTask.createdAt) = DATE(CURRENT_DATE())')
            ->setParameter('employee', $employee)
            ->setParameter('shift', $shift);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getProblemsTasksByStation(BranchStation $station, BranchShift $shift)
    {
        $qb = $this->createQueryBuilder('HistoryProblemTask');
        $qb
            ->innerJoin('HistoryProblemTask.assignment', 'a')
            ->innerJoin('a.role', 'r')
            ->innerJoin('r.branch_station', 's');
        $qb
            ->where('s = :station')
            ->andWhere('HistoryProblemTask.branch_shift = :shift')
            ->andWhere('DATE(HistoryProblemTask.createdAt) = DATE(CURRENT_DATE())')
            ->setParameter('station', $station)
            ->setParameter('shift', $shift);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getProblemsTasksByBranch(Branch $branch, BranchShift $shift)
    {
        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('HistoryProblemTask');
        $qb
            ->innerJoin('HistoryProblemTask.assignment', 'a')
            ->innerJoin('a.role', 'r')
            ->innerJoin('r.branch_station', 's')
            ->innerJoin('s.branch', 'b');
        $qb
            ->where('b = :branch')
            ->andWhere('HistoryProblemTask.branch_shift = :shift')
            //->andWhere('DATE(HistoryProblemTask.createdAt) = DATE(CURRENT_DATE())')
            ->andWhere("TIMESTAMPDIFF(second, :start_time, HistoryProblemTask.createdAt) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, HistoryProblemTask.createdAt) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter('branch', $branch)
            ->setParameter('shift', $shift);

        $query = $qb->getQuery();
        return $query->getResult();
    }
}
