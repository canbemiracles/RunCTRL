<?php

namespace ApiBundle\Repository;
use ApiBundle\Entity\Branch;
use Symfony\Component\CssSelector\Exception\InternalErrorException;

/**
 * BranchShiftRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BranchShiftRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Returns the first shift of the filtered list.
     * @param $param
     * @return mixed
     */
    public function getBranchShiftOneByParam($param) {
        $qr = $this->createQueryBuilder('BranchShift');
        $qr->innerJoin('BranchShift.shift_day', 'sd');
        if(!empty($param['branch'])) {
            $qr->andWhere('BranchShift.branch = :branch')
                ->setParameter('branch', $param['branch']);
        }
        if(!empty($param['filter_time_open_day']) && !empty($param['filter_day']) && !empty($param['filter_time_open']) && !empty($param['day'])) {
            $qr->andWhere('TIME(BranchShift.time_open) < TIME(:filter_time_open) and BranchShift.shift_day = :filter_shift_day or sd.day < :filter_day')
                ->setParameter('filter_time_open', $param['filter_time_open'])
                ->setParameter('filter_shift_day', $param['filter_shift_day'])
                ->setParameter('filter_day', $param['filter_day']);
        } else {
            if (!empty($param['filter_shift_day'])) {
                $qr->andWhere('BranchShift.shift_day = :filter_shift_day')
                    ->setParameter('filter_shift_day', $param['filter_shift_day']);
            }
            if (!empty($param['filter_time_open'])) {
                $qr->andWhere('TIME(BranchShift.time_open) < TIME(:filter_time_open)')
                    ->setParameter('filter_time_open', $param['filter_time_open']);
            }
        }
        if(!empty($param['filter_time_close'])) {
            $qr->andWhere('TIME(BranchShift.time_close) > TIME(:filter_time_close)')
                ->setParameter('filter_time_close', $param['filter_time_close']);
        }
        if(!empty($param['sort_time_open_desc'])) {
            $qr->orderBy('BranchShift.time_open', 'DESC');
        }
        if(!empty($param['sort_shift_day_asc'])) {
            $qr->orderBy('BranchShift.shift_day', 'ASC');
        }
        $qr->setMaxResults(1);
        $query = $qr->getQuery();
        return $query->getOneOrNullResult();
    }

    /**
     * Returns the next shift that should occur.
     * @param $current_shift
     * @param $param
     * @throws
     * @return mixed
     */
    public function nextShiftBegin($current_shift, $param) {
        $qb = $this->createQueryBuilder('BranchShift');
        $qb->innerJoin('BranchShift.shift_day', 'sd');
        if(!empty($current_shift)) {
            $qb->andWhere('BranchShift.branch = :branch')
                ->andWhere("TIME(BranchShift.time_open) >= TIME(:filter_time)")
                ->andWhere("TIME(BranchShift.time_open) <= TIME(:filter_limit_time)")
                ->andWhere("sd.day >= :filter_day")
                ->setParameter('branch', $current_shift)
                ->setParameter('filter_time', $param['filter_time'])
                ->setParameter('filter_limit_time', $param['filter_limit_time'])
                ->setParameter('filter_day', $param['filter_day']);
        }
        $qb->setMaxResults(1);
        $qb->orderBy('BranchShift.time_open', 'DESC');
        $qb->orderBy('BranchShift.shift_day', 'DESC');
        $query = $qb->getQuery();
        if(count($query->getResult()) > 1) {
            throw new InternalErrorException("Shift is not unique");
        }
        return $query->getOneOrNullResult();
    }

    /**
     * Returns the prev shift.
     * @param $branch
     * @param $current_day
     * @param $current_time
     * @throws
     * @return mixed
     */
    public function prevShift($branch, $current_day, $current_time) {
        $qb = $this->createQueryBuilder('BranchShift');
        $qb->innerJoin('BranchShift.shift_day', 'sd');

        $qb->andWhere('BranchShift.branch = :branch')
            ->andWhere("TIME(BranchShift.time_open) <= TIME(:filter_time)")
            ->andWhere("sd.day <= :filter_day")
            ->setParameter('branch', $branch)
            ->setParameter('filter_time', $current_time)
            ->setParameter('filter_day', $current_day);

        $qb->setMaxResults(1);
        $qb->orderBy('BranchShift.time_open', 'DESC');
        $qb->orderBy('BranchShift.shift_day', 'DESC');
        $query = $qb->getQuery();
        if(count($query->getResult()) > 1) {
            throw new InternalErrorException("Shift is not unique");
        }
        return $query->getOneOrNullResult();
    }

    /**
     * Returns the current shift.
     * @param $param
     * @throws
     * @return mixed
     */
    public function getCurrentShift($param) {
        $qb = $this->createQueryBuilder('BranchShift');
        $qb->innerJoin('BranchShift.shift_day', 'sd');

        if(!empty($param['branch'])) {
            $qb->andWhere('BranchShift.branch = :branch')
                ->setParameter('branch', $param['branch']);
        }

        if(!empty($param['filter_time_open']) && !empty($param['filter_time_close'])) {
            $qb->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->andX(
                        $qb->expr()->andX('TIME(BranchShift.time_open) <= TIME(BranchShift.time_close)'),
                        $qb->expr()->andX('TIME(BranchShift.time_open) <= TIME(:filter_time_open)'),
                        $qb->expr()->andX('TIME(BranchShift.time_close) >= TIME(:filter_time_close)')
                    ),
                    $qb->expr()->andX(
                        $qb->expr()->andX('TIME(BranchShift.time_open) > TIME(BranchShift.time_close)'),
                        $qb->expr()->orX(
                            $qb->expr()->orX('TIME(BranchShift.time_open) <= TIME(:filter_time_open)'),
                            $qb->expr()->orX('TIME(BranchShift.time_close) >= TIME(:filter_time_close)')
                        )
                    )
                )
            )
            ->setParameter('filter_time_open', $param['filter_time_open'])
            ->setParameter('filter_time_close', $param['filter_time_close']);
        }

        if (!empty($param['filter_shift_day'])) {
            $qb->andWhere('BranchShift.shift_day = :filter_shift_day')
                ->setParameter('filter_shift_day', $param['filter_shift_day']);
        }

        $qb->setMaxResults(1);
        $query = $qb->getQuery();
        if(count($query->getResult()) > 1) {
            throw new InternalErrorException("Shift is not unique");
        }
        return $query->getOneOrNullResult();
    }

    /**
     * Returns filtered list shifts.
     * @param $param
     * @return mixed
     */
    public function getBranchShiftsByParam($param) {
        $qr = $this->createQueryBuilder('BranchShift');
        if(!empty($param['filter_day'])) {
            $qr->andWhere('BranchShift.shift_day = :filter_day')
                ->setParameter('filter_day', $param['filter_day']);
        }
        if(!empty($param['filter_time_open'])) {
            $qr->andWhere('TIME(BranchShift.time_open) <= TIME(:filter_time_open)')
                ->setParameter('filter_time_open', $param['filter_time_open']);
        }
        if(!empty($param['filter_limit_open_time']) && !empty($param['filter_time_open'])) {
            $qr->andWhere('TIME(TIMESTAMPADD(MINUTE, :filter_limit_open_time, BranchShift.time_open)) >= TIME(:filter_time_open)')
                ->setParameter('filter_limit_open_time', $param['filter_limit_open_time']);
        }
        $query = $qr->getQuery();
        return $query->getResult();
    }


    /**
     * @param $time_open
     * @param $time_close
     * @param $branch Branch
     * @param $shift_day
     * @return mixed
    */
    public function checkShift($time_open, $time_close, $branch, $shift_day)
    {
        $qr = $this->createQueryBuilder('BranchShift');
        $qr->andWhere('BranchShift.branch = :branch')
            ->andWhere('BranchShift.shift_day = :shift_day')
            ->andWhere(
                $qr->expr()->orX(
                    $qr->expr()->andX(
                        $qr->expr()->andX('TIME(:time_open) <= TIME(:time_close)'),
                        $qr->expr()->andX('TIME(BranchShift.time_open) <= TIME(:time_open)'),
                        $qr->expr()->andX('TIME(BranchShift.time_close) >= TIME(:time_close)')
                    ),
                    $qr->expr()->andX(
                        $qr->expr()->andX('TIME(:time_open) > TIME(:time_close)'),
                        $qr->expr()->andX('TIME(BranchShift.time_open) >= TIME(:time_open)'),
                        $qr->expr()->andX('TIME(BranchShift.time_close) <= TIME(:time_close)')
                    )
                )
            )
            ->setParameter('branch', $branch)
            ->setParameter('shift_day', $shift_day)
            ->setParameter('time_open', $time_open)
            ->setParameter('time_close', $time_close);
        $query = $qr->getQuery();
        return $query->getResult();
    }

}
