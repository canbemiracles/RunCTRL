imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: settings.yml }
    - { resource: subscription/free_plan.yml }
    - { resource: subscription/pro_plan.yml }
    - { resource: subscription/enterprise_plan.yml }
    - { resource: paginator/paginator.yml }
    - { resource: paginator/page_range.yml }
    - { resource: shift/parametr_shift.yml }
    - { resource: payment/payum.yml }
    - { resource: cloudflare/cloudflare.yml }
    - { resource: currencylayer/setting.yml }
    - { resource: knp/snappy.yml }
    - { resource: "@ApiBundle/Resources/config/services.yml" }
    - { resource: "@AssignmentsBundle/Resources/config/services.yml" }
    - { resource: "@WebSocketsBundle/Resources/config/services.yml" }
    - { resource: '@ApiBundle/Resources/config/config.yml' }
    - { resource: '@WebSocketsBundle/Resources/config/config.yml' }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi: ~
    #translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection:
        enabled: false
    validation: { enabled: true, enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.pdo
#        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true
    translator:
        fallback: en_EN
        paths:
          - '%kernel.project_dir%/app/Resources/translations'


# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    globals:
        frontend_url: '%frontend_url%'
        backend_url: '%backend_url%'
        system_email: '%system_email%'

# FOSUser Configuration
fos_user:
    db_driver: orm
    # TODO: Configurate Firewall
    firewall_name: main
    user_class: ApiBundle\Entity\User\AbstractUser
    group:
        group_class: ApiBundle\Entity\User\Group
    from_email:
        # TODO: Move to config
        address: "run@gmail.com"
        # TODO: Move to config
        sender_name: "Run_Control"
    registration:
            form:
                # TODO: Implement form, and insert here
                type: user_registration
                validation_groups: [EmailRegistration]
                # TODO: configurate confirmation
            confirmation:
                enabled: true
                template: email_confirmation.html.twig
    service:
        mailer: fos_user.mailer.twig_swift
    resetting:
        email:
            template:   password_resetting.email.twig
        # TODO: Move to config
        token_ttl: 86400
    profile:
        form:
            type: user_profile
            validation_groups: [EmailProfile]

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        dql:
           datetime_functions:
              TIMESTAMPDIFF: ApiBundle\DQL\TimestampDiff
              TIME: ApiBundle\DQL\Time
              DATEDIFF: ApiBundle\DQL\DateDiff
              IF: ApiBundle\DQL\IfElse
              DATE_FORMAT: ApiBundle\DQL\DateFormat
              DATE: ApiBundle\DQL\Date
              TIMESTAMPADD: ApiBundle\DQL\TimestampAdd
              MONTH: ApiBundle\DQL\Month
              HOUR: ApiBundle\DQL\Hour

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    port: '%mailer_port%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    encryption: ssl
    sender_address: '%mailer_sender_address%'


doctrine_migrations:
    dir_name: "%kernel.root_dir%/DoctrineMigrations"
    namespace: Application\Migrations
    table_name: migration_versions
    name: Application Migrations

fos_rest:
    body_listener: true
    param_fetcher_listener: force
    view:
      view_response_listener: true
      failed_validation: HTTP_BAD_REQUEST
    routing_loader:
        default_format: json
        include_format: false
    serializer:
        serialize_null: true
    format_listener:
        rules:
            - { path: '^/api',  priorities: ['json'], fallback_format: json, prefer_extension: true }
            - { path: '^/tests',  priorities: ['json'], fallback_format: json, prefer_extension: true }
            - { path: '^/', stop: true }
    exception:
        enabled: true
        messages:
            Symfony\Component\HttpKernel\Exception\BadRequestHttpException: true
            Symfony\Component\HttpKernel\Exception\NotFoundHttpException: true
            Symfony\Component\HttpKernel\Exception\ConflictHttpException: true
jms_serializer:
    property_naming:
        separator:  _
        lower_case: true
    metadata:
        cache: file
        debug: "%kernel.debug%"
        file_cache:
            dir: "%kernel.cache_dir%/serializer"
        directories:
            FOSUserBundle:
                namespace_prefix: FOS\UserBundle
                path: '%kernel.root_dir%/config/serializer/Fos/UserBundle'
            ApiBundle:
                namespace_prefix: ApiBundle
                path: '%kernel.root_dir%/config/serializer/ApiBundle'
            AssignmentsBundle:
                namespace_prefix: AssignmentsBundle
                path: '%kernel.root_dir%/config/serializer/AssignmentsBundle'
            WebSocketsBundle:
                namespace_prefix: WebSocketsBundle
                path: '%kernel.root_dir%/config/serializer/WebSocketsBundle'
        auto_detection: true

nelmio_api_doc: ~

fos_oauth_server:
    db_driver: orm       # Drivers available: orm, mongodb, or propel
    client_class:        ApiBundle\Entity\OAuth\Client
    access_token_class:  ApiBundle\Entity\OAuth\AccessToken
    refresh_token_class: ApiBundle\Entity\OAuth\RefreshToken
    auth_code_class:     ApiBundle\Entity\OAuth\AuthCode
    service:
            user_provider: fos_user.user_provider.username_email

scheb_two_factor:
      google:
          enabled: true
      security_tokens:
          - Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken

stof_doctrine_extensions:
    default_locale: en_US

    # Only used if you activated the Uploadable extension
    uploadable:
        # Default file path: This is one of the three ways you can configure the path for the Uploadable extension
        default_file_path:       "%kernel.root_dir%/../web/uploads"

        # Mime type guesser class: Optional. By default, we provide an adapter for the one present in the HttpFoundation component of Symfony
        mime_type_guesser_class: Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter

    orm:
        default:
            timestampable: true
            uploadable: true

maxmind_geoip:
    data_file_path: "%kernel.root_dir%/Resources/GeoIp/GeoLiteCity.dat"

redjan_ym_fcm:
    firebase_api_key: "AAAATHBi2Ws:APA91bFM4VPmx9MWpTA_nUAeDAPKALS11clToGk5mzMjYF-RSuM9foxtNL1uQrTUb0VUisHm6vlKMN_yJdy9h1F35Ay8DUDWcAxGKPBgj7KRkGQYORuO3xxmrWgsXZ3stcyhVxxFvVQj"

rms_push_notifications:
  ios:
      sandbox: true
      pem: "%kernel.root_dir%/Resources/APNS.pem"
      passphrase: 1234@@#@

nelmio_cors:
    defaults:
        allow_credentials: true
        allow_origin: []
        allow_headers: []
        allow_methods: []
        expose_headers: []
        max_age: 0
        hosts: []
        origin_regex: false
        forced_allow_origin_value: ~
    paths:
        '^/':
            allow_origin: ['*']
            allow_headers: ['*']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE', 'PATCH', 'OPTIONS']
            max_age: 3600
sonata_block:
    default_contexts: [cms]
    blocks:
        # enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts: [admin]
        # ...