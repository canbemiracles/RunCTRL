<?php

namespace ApiBundle\Repository\Report;

use ApiBundle\Entity\Branch;
use ApiBundle\Entity\BranchStation;
use ApiBundle\Entity\Company;
use ApiBundle\Entity\Report\EndOfShiftReport;

/**
 * CashierReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CashierReportRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Counting the ratio.
     * @param $branch
     * @param $budget
     * @return mixed
     */
    public function calculateRatio($branch, $budget) {
        $qb = $this->createQueryBuilder('CashierReport');
        $qb
            ->select('1/SUM(CashierReport.amount)*:budget  * 100 as ratio')
            ->innerJoin('CashierReport.branch_station', 'bst')
            ->where('bst.branch = :branch')->setParameter('branch', $branch)->setParameter('budget', $budget);
        $query = $qb->getQuery();
        return array_column($query->getResult(), 'ratio');
    }

    /**
     * Counting the ratio.
     * @param Company $company
     * @param $budget
     * @return mixed
     */
    public function calculateRatioByCompany($company, $budget) {
        $qb = $this->createQueryBuilder('CashierReport');
        $qb
            ->select('1/SUM(CashierReport.amount)*:budget  * 100 as ratio')
            ->innerJoin('CashierReport.branch_station', 'bst')
            ->innerJoin('bst.branch', 'b')
            ->innerJoin('b.company', 'c')
            ->andWhere('c.id = :company')->setParameter(':company', $company)->setParameter('budget', $budget);
        $qb->setMaxResults(1);
        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    /**
     * Get the list reports which were made in shift.
     * @param EndOfShiftReport $report
     * @return mixed
     */
    public function getCashierReportsByEndOfShiftReport($report) {
        $qb = $this->createQueryBuilder('CashierReport');
        $qb->where('TIMESTAMPDIFF(second, :created, CashierReport.created) >= 0 AND TIMESTAMPDIFF(second, CashierReport.created, :updated) >= 0')
            ->setParameter('created', $report->getCreated())->setParameter('updated', $report->getUpdated());
        $query = $qb->getQuery();
        return $query->getResult();
    }


    /**
     * Get the list reports which were made in together by branch.
     * @param Branch $branch
     * @param $param
     * @return mixed
     */
    public function getCashierReportByParam($branch, $param)
    {
        $qb = $this->createQueryBuilder('CashierReport');

        $qb->innerJoin('CashierReport.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b');
        $qb->andWhere('b.id = :branch')->setParameter(':branch', $branch);

        if(!empty($param['date'])) {
            $qb->andWhere('DATE(:date) = DATE(CashierReport.created)')->setParameter(':date', $param['date']);
        }

        if(!empty($param['branch_station'])) {
            $qb->andWhere(':branch_station = CashierReport.branch_station')->setParameter(':branch_station', $param['branch_station']);
        }

        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * Returns branch income
     * @param $date_start
     * @param $date_end
     * @param Company $company
     * @return mixed
     */
    public function getBranchesIncomeByParam($date_start, $date_end, $company)
    {
        $qb = $this->createQueryBuilder('CashierReport');
        $qb->select('b.id as branch_id, ga.street_address as address, SUM(CashierReport.amount) as income')
          ->innerJoin('CashierReport.branch_station', 'bs')
          ->innerJoin('bs.branch', 'b')
          ->innerJoin('b.geographical_area', 'ga')
          ->innerJoin('b.company', 'c');

        $qb->andWhere('b.company = :company')
            ->andWhere('TIMESTAMPDIFF(second, :date_start, CashierReport.created) >= 0')
            ->andWhere('TIMESTAMPDIFF(second, CashierReport.created, :date_end) >= 0')
            ->setParameter('company', $company)
            ->setParameter('date_start', $date_start)
            ->setParameter('date_end', $date_end);

         $qb->groupBy('b.id');

        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * Returns station income
     * @param $date_start
     * @param $date_end
     * @param BranchStation $station
     * @return mixed
     */
    public function getStationIncomeByParam($date_start, $date_end, $station)
    {
        $qb = $this->createQueryBuilder('CashierReport');
        $qb->innerJoin('CashierReport.branch_station', 'bs');

        $qb->andWhere('CashierReport.branch_station = :station')
            ->andWhere('TIMESTAMPDIFF(second, :date_start, CashierReport.created) >= 0')
            ->andWhere('TIMESTAMPDIFF(second, CashierReport.created, :date_end) >= 0')
            ->setParameter('station', $station)
            ->setParameter('date_start', $date_start)
            ->setParameter('date_end', $date_end);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * @param $date_start string
     * @param $date_end string
     * @param $branch Branch
     * @return mixed
     */
    public function getCashierGroupPaymentMethodByBranch($branch, $date_start, $date_end)
    {
        $qb = $this->createQueryBuilder('CashierReport');
        $qb->select("CashierReport.payment_method as payment_method, SUM(CashierReport.amount) as amount")
            ->innerJoin('CashierReport.branch_station', 'bs')
            ->innerJoin('bs.branch', 'b');

        $qb->andWhere('bs.branch = :branch')
            ->andWhere('TIMESTAMPDIFF(second, :date_start, CashierReport.created) >= 0')
            ->andWhere('TIMESTAMPDIFF(second, CashierReport.created, :date_end) >= 0')
            ->setParameter('branch', $branch)
            ->setParameter('date_start', $date_start)
            ->setParameter('date_end', $date_end);

        $qb->groupBy('CashierReport.payment_method');

        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * @param $date_start string
     * @param $date_end string
     * @param $branch Branch
     * @return mixed
     */
    public function getCashierByBranch($branch, $date_start, $date_end)
    {
        $qb = $this->createQueryBuilder('CashierReport');
        $qb->innerJoin('CashierReport.currency', 'c')
            ->innerJoin('CashierReport.branch_station', 'bs')
            ->innerJoin('bs.branch', 'b');

        $qb->andWhere('bs.branch = :branch')
            ->andWhere('TIMESTAMPDIFF(second, :date_start, CashierReport.created) >= 0')
            ->andWhere('TIMESTAMPDIFF(second, CashierReport.created, :date_end) >= 0')
            ->setParameter('branch', $branch)
            ->setParameter('date_start', $date_start)
            ->setParameter('date_end', $date_end);

        $qb->orderBy('CashierReport.created', 'ASC');

        $query = $qb->getQuery();

        return $query->getResult();
    }
}
