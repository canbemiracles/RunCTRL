<?php

namespace ApiBundle\Repository;
use ApiBundle\Entity\Branch;
use ApiBundle\Entity\BranchShift;
use ApiBundle\Entity\Company;
use ApiBundle\Entity\Employee;
use ApiBundle\Entity\HistoryEmployeeRole;
use ApiBundle\Entity\Role\AbstractBranchStationRole;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Component\CssSelector\Exception\InternalErrorException;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * HistoryEmployeeRoleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HistoryEmployeeRoleRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Counting the total time of work.
     * @param $shift
     * @param $param
     * @return mixed
     */
    public function calculateTotalWorkTime($shift, $param) {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->select('SUM(TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, HistoryEmployeeRole.date_end)/3600) as total_work_time')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->andWhere('HistoryEmployeeRole.branch_shift = :shift')->setParameter('shift', $shift);
            if(!empty($param['date'])) {
                $qb->andWhere("DATEDIFF(:date_start, HistoryEmployeeRole.date_start) = 0")
                    ->setParameter('date_start', $param['date']);
            }
            if(!empty($param['time_open']) && !empty($param['filter_limit_open_time'])) {
                $qb->andWhere("TIMESTAMPDIFF(second, TIME( :time_open ), TIME(TIMESTAMPADD(MINUTE, :filter_limit_open_time, HistoryEmployeeRole.date_start))) >= 0 ")
                    ->setParameter('time_open', $param['time_open']->format('H:i:s'))
                    ->setParameter('filter_limit_open_time', $param['filter_limit_open_time']);
            }
            if(!empty($param['time_close'])) {
                $qb->andWhere("TIMESTAMPDIFF(second, TIME( :time_close ), TIME(HistoryEmployeeRole.date_start)) <= 0 ")
                    ->setParameter('time_close', $param['time_close']->format('H:i:s'));
            }
        $query = $qb->getQuery();
        return array_column($query->getResult(), 'total_work_time');
    }

    /**
     * Counting the total time of work by branch.
     * @param $branch
     * @return mixed
     */
    public function calculateTotalWorkTimeByBranch($branch)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');

        $qb
            ->select('SUM(TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
                    IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600) as total_work_time')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b');

        $qb
            ->andWhere('b.id = :branch')->setParameter(':branch', $branch)
            ->andWhere('DATE(HistoryEmployeeRole.date_start) = DATE(:date_time_end_current)')
            ->setParameter(':date_time_end_current', date('Y-m-d H:i:s'));

        $query = $qb->getQuery();
        return array_column($query->getResult(), 'total_work_time');
    }

    /**
     * Counting the total time of work by company.
     * @param Company $company
     * @return mixed
     */
    public function calculateTotalWorkTimeByCompanyOld($company)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');

        $qb
            ->select('SUM(TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
                    IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600) as total_work_time');
            $qb->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
                ->innerJoin('bs.branch', 'b')
                ->innerJoin('b.company', 'c');

        $qb
            ->andWhere('c.id = :company')->setParameter(':company', $company)
            ->andWhere('DATE(HistoryEmployeeRole.date_start) = DATE(:date_time_end_current)')
            ->setParameter(':date_time_end_current', date('Y-m-d H:i:s'));

        $qb->setMaxResults(1);
        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    /**
     * Counting the total time of work by company.
     * @param Company $company
     * @return mixed
     */
    public function calculateTotalWorkTimeByCompany($company)
    {
        $sqb = $this->createQueryBuilder('HistoryEmployeeRole')->select("e.id")
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->innerJoin('b.company', 'c')
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->andWhere('c.id = :company')->setParameter(':company', $company)
            ->andWhere('DATE(HistoryEmployeeRole.date_start) = DATE(:date_time_end_current)')
            ->setParameter(':date_time_end_current', date('Y-m-d H:i:s'))
            ->groupBy("e.id");

        $records = $sqb->getQuery()->getResult();

        $totalWorkTime = 0;

        foreach ($records as $record) {
            $qb = $this->createQueryBuilder('HistoryEmployeeRole')
                ->select('TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
                    IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600 as total_work_time')
                ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
                ->innerJoin('bs.branch', 'b')
                ->innerJoin('b.company', 'c')
                ->innerJoin('HistoryEmployeeRole.employee', 'e')
                ->andWhere('c.id = :company')->setParameter(':company', $company)
                ->andWhere('DATE(HistoryEmployeeRole.date_start) = DATE(:date_time_end_current)')
                ->setParameter(':date_time_end_current', date('Y-m-d H:i:s'))
                ->andWhere('e.id = :employee')->setParameter('employee', $record['id'])
                ->orderBy('HistoryEmployeeRole.date_start', 'ASC')->setMaxResults(1);

            $totalWorkTime += current($qb->getQuery()->getResult())['total_work_time'];
        }

        return $totalWorkTime;
    }

    /**
     * Counting the current budget.
     * @param Company $company
     * @return mixed
     */
    public function dynamicCalculateEmployeeBudgetByCompanyOld($company) {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->select('SUM(TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
                IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600*e.hourly_rate) as employee_budget')
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->innerJoin('b.company', 'c')
            ->andWhere('c.id = :company')->setParameter(':company', $company);

        $qb->andWhere('DATE(HistoryEmployeeRole.date_start) = DATE(:date_time_end_current)')
            ->setParameter(':date_time_end_current', date('Y-m-d H:i:s'));

        $qb->setMaxResults(1);
        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    /**
     * Counting the current budget.
     * @param Company $company
     * @return mixed
     */
    public function dynamicCalculateEmployeeBudgetByCompany($company) {
        $sqb = $this->createQueryBuilder('HistoryEmployeeRole')->select("e.id")
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->innerJoin('b.company', 'c')
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->andWhere('c.id = :company')->setParameter(':company', $company)
            ->andWhere('DATE(HistoryEmployeeRole.date_start) = DATE(:date_time_end_current)')
            ->setParameter(':date_time_end_current', date('Y-m-d H:i:s'))
            ->groupBy("e.id");

        $records = $sqb->getQuery()->getResult();

        $total_employee_budget = 0;

        foreach ($records as $record) {
            $qb = $this->createQueryBuilder('HistoryEmployeeRole')
                ->select('TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
                    IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600*e.hourly_rate as total_work_time')
                ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
                ->innerJoin('bs.branch', 'b')
                ->innerJoin('b.company', 'c')
                ->innerJoin('HistoryEmployeeRole.employee', 'e')
                ->andWhere('c.id = :company')->setParameter(':company', $company)
                ->andWhere('DATE(HistoryEmployeeRole.date_start) = DATE(:date_time_end_current)')
                ->setParameter(':date_time_end_current', date('Y-m-d H:i:s'))
                ->andWhere('e.id = :employee')->setParameter('employee', $record['id'])
                ->orderBy('HistoryEmployeeRole.date_start', 'ASC')->setMaxResults(1);

            $total_employee_budget += current($qb->getQuery()->getResult())['total_work_time'];
        }

        return $total_employee_budget;
    }

    /**
     * Counting the current time of work.
     * @param $shift
     * @param $param
     * @return mixed
     */
    public function dynamicCalculateTotalWorkTime($shift, $param) {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->select('SUM(TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
            IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600) as total_work_time')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->andWhere('HistoryEmployeeRole.branch_shift = :shift')->setParameter('shift', $shift);
        if(!empty($param['date_time_start'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, :date_time_start, HistoryEmployeeRole.date_start) >= 0 ")
                ->setParameter('date_time_start', $param['date_time_start']);
        }
        if(!empty($param['date_time_end_current'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, :date_time_end_current) >= 0 ")
                ->setParameter('date_time_end_current', $param['date_time_end_current']);
        } else {
            $qb->setParameter('date_time_end_current', date("Y-m-d H:i:s"));
        }
        $query = $qb->getQuery();
        return array_column($query->getResult(), 'total_work_time');
    }

    /**
     * Counting the current budget.
     * @param $shift
     * @param $param
     * @return mixed
     */
    public function dynamicCalculateEmployeeBudget($shift, $param) {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->select('SUM(TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
            IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600*e.hourly_rate * 
            IF(sd.day = 6 or sd.day = 7, c.weekend_rate, 1)) as employee_budget')
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.shift_day', 'sd')
            ->innerJoin('e.company', 'c')
            ->andWhere('HistoryEmployeeRole.branch_shift = :shift')->setParameter('shift', $shift);
        if(!empty($param['date_time_start'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, :date_time_start, HistoryEmployeeRole.date_start) >= 0 ")
                ->setParameter('date_time_start', $param['date_time_start']);
        }
        if(!empty($param['date_time_end_current'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, :date_time_end_current) >= 0 ")
                ->setParameter('date_time_end_current', $param['date_time_end_current']);
        } else {
            $qb->setParameter('date_time_end_current', date("Y-m-d H:i:s"));
        }

        $query = $qb->getQuery();
        return array_column($query->getResult(), 'employee_budget');
    }

    /**
     * @param $branch Branch
     * @return mixed
     */
    public function calculateLiveEmployeeBudgetByBranch($branch)
    {

        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->select('SUM(TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
            IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600*e.hourly_rate * 
            IF(sd.day = 6 or sd.day = 7, c.weekend_rate, 1)) as employee_budget')
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.shift_day', 'sd')
            ->innerJoin('bs.branch', 'b')
            ->innerJoin('e.company', 'c');

        $qb->andWhere('b = :branch')->setParameter(':branch', $branch);

        $qb->andWhere("TIMESTAMPDIFF(second, :date_time_start, HistoryEmployeeRole.date_start) >= 0 ")
            ->setParameter('date_time_start', date('Y-m-d'));

        $qb->andWhere("TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, :date_time_end_current) >= 0 ")
            ->setParameter('date_time_end_current', date("Y-m-d H:i:s"));


        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    /**
     * Counting the total budget.
     * @param $shift
     * @param $param
     * @return mixed
     */
    public function calculateEmployeeBudget($shift, $param) {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->select('SUM(TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, HistoryEmployeeRole.date_end)/3600*e.hourly_rate*
            IF(sd.day = 6 or sd.day = 7, c.weekend_rate, 1)) as employee_budget')
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.shift_day', 'sd')
            ->innerJoin('e.company', 'c')
            ->andWhere('HistoryEmployeeRole.branch_shift = :shift')->setParameter('shift', $shift);
            if(!empty($param['date'])) {
                $qb->andWhere("DATEDIFF(:date_start, HistoryEmployeeRole.date_start) = 0")
                    ->setParameter('date_start', $param['date']);
            }
        if(!empty($param['time_open']) && !empty($param['filter_limit_open_time'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, TIME( :time_open ), TIME(TIMESTAMPADD(MINUTE, :filter_limit_open_time, HistoryEmployeeRole.date_start))) >= 0 ")
                ->setParameter('time_open', $param['time_open']->format('H:i:s'))
                ->setParameter('filter_limit_open_time', $param['filter_limit_open_time']);
        }
            if(!empty($param['time_close'])) {
                $qb->andWhere("TIMESTAMPDIFF(second, TIME( :time_close ), TIME(HistoryEmployeeRole.date_start)) <= 0 ")
                    ->setParameter('time_close', $param['time_close']->format('H:i:s'));
            }
        $query = $qb->getQuery();
        return array_column($query->getResult(), 'employee_budget');
    }

    public function calculateEmployeeBudgetByShift(Employee $employee, BranchShift $shift)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->select('SUM(TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, HistoryEmployeeRole.date_end)/3600*e.hourly_rate*
            IF(sd.day = 6 or sd.day = 7, c.weekend_rate, 1)) as employee_budget')
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.shift_day', 'sd')
            ->innerJoin('e.company', 'c')
            ->andWhere('HistoryEmployeeRole.branch_shift = :shift')->setParameter('shift', $shift)
            ->andWhere('HistoryEmployeeRole.employee = :employee')->setParameter('employee', $employee);
        $query = $qb->getQuery();
        return $query->getSingleScalarResult();
    }

    /**
     * Returns filtered list records.
     * @param $param
     * @return mixed
     */
    public function getHistoryEmployeeRoleByParam($param) {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');

        if(!empty($param['company'])) {
            $qb->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
                ->innerJoin('bs.branch', 'b')
                ->innerJoin('b.company', 'c');
            $qb->andWhere('c.id = :company')->setParameter(':company', $param['company']);
        }
        if(!empty($param['shift'])) {
            $qb->andWhere('HistoryEmployeeRole.branch_shift = :shift')
                ->setParameter('shift', $param['shift']);
        }
        if(!empty($param['date_start'])) {
            $qb->andWhere("DATEDIFF(:date_start, HistoryEmployeeRole.date_start) = 0")
                ->setParameter('date_start', $param['date_start']);
        }
        if(!empty($param['time_open'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, TIME( :time_open ), TIME(HistoryEmployeeRole.date_start)) >= 0")
                ->setParameter('time_open', $param['time_open']);
        }
        if(!empty($param['time_close_null'])) {
            $qb->andWhere("HistoryEmployeeRole.date_end IS NULL");
        }
        if(!empty($param['time_close_not_null'])) {
            $qb->andWhere("HistoryEmployeeRole.date_end IS NOT NULL");
        }
        $query = $qb->getQuery();
        return $query->getResult();

    }

    /**
     * Returns filtered list employees.
     * @param $param
     * @return mixed
     */
    public function getEmployeesWorked($param) {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb->select('e.id, e.first_name, e.last_name, e.hourly_rate')
            ->innerJoin('HistoryEmployeeRole.employee', 'e');
        if(!empty($param['shift'])) {
            $qb->andWhere("HistoryEmployeeRole.branch_shift = :shift")
                ->setParameter('shift', $param['shift']);
        }
        if(!empty($param['date_time_start'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, :date_time_start, HistoryEmployeeRole.date_start) >= 0 ")
                ->setParameter('date_time_start', $param['date_time_start']);
        }
        if(!empty($param['date_time_end'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, HistoryEmployeeRole.date_end, :date_time_end) >= 0 ")
                ->setParameter('date_time_end', $param['date_time_end']);
        }
        if(!empty($param['date_time_end_current'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, :date_time_end_current) >= 0 ")
                ->setParameter('date_time_end_current', $param['date_time_end_current']);
        }
        $query = $qb->getQuery();
        return $query->getResult();
    }


    /**
     * Return one record.
     * @param $param
     * @return HistoryEmployeeRole
     */
    public function getOneRecord($param)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');

        if(!empty($param['branch'])) {
            $qb->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
                ->innerJoin('bs.branch', 'b');
            $qb->andWhere('b.id = :branch')->setParameter(':branch', $param['branch']);
        }

        if(!empty($param['company'])) {
            $qb->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
                ->innerJoin('bs.branch', 'b')
                ->innerJoin('b.company', 'c');
            $qb->andWhere('c.id = :company')->setParameter(':company', $param['company']);
        }

        if(!empty($param['date_start'])) {
            $qb->andWhere('DATE(:date_start) = DATE(HistoryEmployeeRole.date_start)')->setParameter(':date_start', $param['date_start']);
        }

        if(!empty($param['date_end'])) {
            $qb->andWhere('DATE(:date_end) = DATE(HistoryEmployeeRole.date_end)')->setParameter(':date_end', $param['date_end']);
        }

        if(!empty($param['employee'])) {
            $qb->andWhere('HistoryEmployeeRole.employee = :employee')->setParameter(':employee', $param['employee']);
        }

        if(!empty($param['not_employee'])) {
            $qb->andWhere('HistoryEmployeeRole.employee != :not_employee')->setParameter(':not_employee', $param['not_employee']);
        }

        if(!empty($param['shift'])) {
            $qb->andWhere('HistoryEmployeeRole.branch_shift = :shift')->setParameter(':shift', $param['shift']);
        }

        if(!empty($param['end_time_null'])) {
            $qb->andWhere("HistoryEmployeeRole.date_end IS NULL");
        }

        if(!empty($param['sort_date_start_desc'])) {
            $qb->orderBy('HistoryEmployeeRole.date_start', 'DESC');
        }

        if(!empty($param['sort_date_start_asc'])) {
            $qb->orderBy('HistoryEmployeeRole.date_start', 'ASC');
        }

        if(!empty($param['sort_date_end_desc'])) {
            $qb->orderBy('HistoryEmployeeRole.date_end', 'DESC');
        }

        $qb->setMaxResults(1);
        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    /**
     * Get the list reports which were made in together by branch.
     * @param Branch $branch
     * @param $param
     * @return mixed
     */
    public function getListByParam($branch, $param)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole')
            ->select('HistoryEmployeeRole, TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
                IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600 as total_hours, 
                TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
                IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600*e.hourly_rate as total_cost')
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->innerJoin('HistoryEmployeeRole.role', 'r')
            ->innerJoin('r.branch_station', 'bst')
            ->innerJoin('r.assignments', 'a')
            ->innerJoin('a.answers', 'aa')
            ->innerJoin('aa.employee', 'ae');
        $qb->andWhere('b.id = :branch')->setParameter(':branch', $branch)
            ->setParameter(':date_time_end_current', date('Y-m-d H:i:s'));

        if(!empty($param['date_start'])) {
            $qb->andWhere('DATE(:date_start) = DATE(HistoryEmployeeRole.date_start)')->setParameter(':date_start', $param['date_start']);
        }

        $query = $qb->getQuery();
        return $query->getResult();

    }

    /**
     * Get statistic's work of employees.
     * @param Branch $branch
     * @param $date_start \DateTime
     * @return mixed
     */
    public function getStatisticWorking($branch, \DateTime $date_start)
    {

        $subQB = $this->createQueryBuilder("HistoryEmployeeRole")->select("e.id")
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->andWhere('DATE(:date_start) = DATE(HistoryEmployeeRole.date_start)')
            ->andWhere('b.id = :branch')->setParameter(':branch', $branch)
            ->setParameter(':date_start', $date_start->format("Y-m-d H:i:s"))
            ->groupBy("e.id");

        $employees = $subQB->getQuery()->getResult();

        $results = [];

        foreach ($employees as $employee) {
            $qb = $this->createQueryBuilder('HistoryEmployeeRole')
                ->select('HistoryEmployeeRole, TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
                IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600 as total_hours, 
                TIMESTAMPDIFF(second, HistoryEmployeeRole.date_start, 
                IF(HistoryEmployeeRole.date_end IS NULL, :date_time_end_current, HistoryEmployeeRole.date_end))/3600*e.hourly_rate as total_cost')
                ->innerJoin('HistoryEmployeeRole.employee', 'e')
                ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
                ->innerJoin('bs.branch', 'b')
                ->innerJoin('HistoryEmployeeRole.role', 'r')
                ->innerJoin('r.branch_station', 'bst')
                ->innerJoin('r.assignments', 'a')
                ->innerJoin('a.answers', 'aa')
                ->innerJoin('aa.employee', 'ae');
            $qb->andWhere('b.id = :branch')->setParameter(':branch', $branch)
                ->setParameter(':date_time_end_current', date('Y-m-d H:i:s'))
                ->andWhere('DATE(:date_start) = DATE(HistoryEmployeeRole.date_start)')->setParameter(':date_start', $date_start->format("Y-m-d H:i:s"))
                ->andWhere('e.id = :employee')->setParameter('employee', $employee['id'])
                ->andWhere('DATE(:start_time) = DATE(a.start_time)')->setParameter('start_time', $date_start->format("Y-m-d H:i:s"))
            ->orderBy('HistoryEmployeeRole.date_start', 'ASC')->setMaxResults(1);
            if(current($qb->getQuery()->getResult())) {
                $results[] = current($qb->getQuery()->getResult());
            }
        }

        return $results;
    }

    /**
     * @param $role AbstractBranchStationRole
     * @throws
     * @return mixed
    */
    public function getCurrentHistoryEmployeeRole(AbstractBranchStationRole $role)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->where('HistoryEmployeeRole.role = :role')
            ->andWhere('HistoryEmployeeRole.date_end IS NULL')
            ->setParameter('role', $role);

        $query = $qb->getQuery();
        if(count($query->getResult()) > 1) {
            throw new InternalErrorException("Several shifts for one role are open");
        }
        return $query->getOneOrNullResult();
    }

    public function getCurrentEmployeeRole(Employee $employee)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->where('HistoryEmployeeRole.employee = :employee')
            ->andWhere('HistoryEmployeeRole.date_end IS NULL')
            ->setParameter('employee', $employee);

        $query = $qb->getQuery();
        return $query->getOneOrNullResult();
    }

    public function getCurrentEmployeeRoles(Employee $employee, BranchShift $shift)
    {
        $now = new \DateTime();

        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->where('HistoryEmployeeRole.employee = :employee')
            ->andWhere('HistoryEmployeeRole.date_end IS NULL')
            ->andWhere("DATE(HistoryEmployeeRole.date_start) = DATE(:now)")
            ->andWhere("TIME(HistoryEmployeeRole.date_start) >= TIME(:start_time)")
            ->setParameter('start_time', $shift->getTimeOpen())
            ->setParameter("now", $now)
            ->setParameter('employee', $employee);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getAllCurrentEmployeeRoles(Employee $employee)
    {
        $now = new \DateTime();

        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->where('HistoryEmployeeRole.employee = :employee')
            ->andWhere('HistoryEmployeeRole.date_end IS NULL')
            ->andWhere("DATE(HistoryEmployeeRole.date_start) = DATE(:now)")
            ->setParameter("now", $now)
            ->setParameter('employee', $employee);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * Old version query (origin - getHistoryByCurrentMonth)
    */
    public function getHistoryByCurrentMonthOld(Employee $employee, $desc = false)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->where('HistoryEmployeeRole.employee = :employee')
            ->andWhere('HistoryEmployeeRole.date_end IS NOT NULL')
            ->andWhere('MONTH(HistoryEmployeeRole.date_start) = MONTH(CURRENT_DATE())')
            ->setParameter('employee', $employee);

        if($desc) {
            $qb->orderBy('HistoryEmployeeRole.date_start', 'DESC');
        }

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getHistoryByCurrentMonth(Employee $employee, $desc = false)
    {
        $subQuery = $this->createQueryBuilder('hr')
            ->select("MIN(hr.date_start) AS dateStartMin, DATE(hr.date_start) AS dateStart, e.id as employee_id")
            ->innerJoin('hr.employee', 'e')
            ->where('hr.employee = :employee')
            ->andWhere('MONTH(hr.date_start) = MONTH(CURRENT_DATE())')
            ->setParameter('employee', $employee)
            ->groupBy('dateStart');

        $result = $subQuery->getQuery()->getResult();
        $histories = [];
        foreach ($result as $item) {
            $query = $this->createQueryBuilder('hr');
            $query->innerJoin("hr.employee",'e')
                ->andWhere("e.id = :employee_id")
                ->andWhere("hr.date_end IS NOT NULL")
                ->andWhere("TIMESTAMPDIFF(second, hr.date_start, :date_start) = 0")
                ->setParameter("employee_id", $item['employee_id'])
                ->setParameter("date_start", new \DateTime($item['dateStartMin']));
            $query->setMaxResults(1);
            $history = $query->getQuery()->getOneOrNullResult();
            if(!empty($history)) {
                $histories[] = $history;
            }
        }

        return $histories;
    }

    public function getHistoryByMonthOld(Employee $employee, int $month)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->where('HistoryEmployeeRole.employee = :employee')
            ->andWhere('HistoryEmployeeRole.date_end IS NOT NULL')
            ->andWhere('MONTH(HistoryEmployeeRole.date_start) = :month')
            ->setParameter('employee', $employee)
            ->setParameter('month', $month);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getHistoryByMonth(Employee $employee, int $month)
    {
        $subQuery = $this->createQueryBuilder('hr')
            ->select("MIN(hr.date_start) AS dateStartMin, DATE(hr.date_start) AS dateStart, e.id as employee_id")
            ->innerJoin('hr.employee', 'e')
            ->where('hr.employee = :employee')
            ->andWhere('MONTH(hr.date_start) = :month')
            ->setParameter('employee', $employee)
            ->setParameter('month', $month)
            ->groupBy('dateStart');

        $result = $subQuery->getQuery()->getResult();
        $histories = [];
        foreach ($result as $item) {
            $query = $this->createQueryBuilder('hr');
            $query->innerJoin("hr.employee",'e')
                ->andWhere("e.id = :employee_id")
                ->andWhere("hr.date_end IS NOT NULL")
                ->andWhere("TIMESTAMPDIFF(second, hr.date_start, :date_start) = 0")
                ->setParameter("employee_id", $item['employee_id'])
                ->setParameter("date_start", new \DateTime($item['dateStartMin']));
            $query->setMaxResults(1);
            $history = $query->getQuery()->getOneOrNullResult();
            if(!empty($history)) {
                $histories[] = $history;
            }
        }

        return $histories;
    }


    public function getHistoriesActiveByEmployee(Employee $employee)
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole');
        $qb
            ->where('HistoryEmployeeRole.employee = :employee')
            ->andWhere('HistoryEmployeeRole.date_end IS NULL')
            ->setParameter('employee', $employee);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * @return mixed
     */
    public function getOpenShifts()
    {
        $qb = $this->createQueryBuilder('HistoryEmployeeRole')
            ->innerJoin('HistoryEmployeeRole.branch_shift', 'bs')
            ->innerJoin('HistoryEmployeeRole.employee', 'e')
            ->where('HistoryEmployeeRole.date_end IS NULL');

        return $qb->getQuery()->getResult();
    }
}
