<?php

namespace AssignmentsBundle\Repository\Assignment;
use ApiBundle\Entity\Branch;
use ApiBundle\Entity\BranchShift;
use ApiBundle\Entity\BranchStation;
use ApiBundle\Entity\Company;
use ApiBundle\Entity\Role\AbstractBranchStationRole;
use ApiBundle\Entity\Role\BranchStationOriginRole;
use Doctrine\Common\Collections\Collection;

/**
 * AbstractAssignmentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbstractAssignmentRepository extends \Doctrine\ORM\EntityRepository
{
    public function getNewAndRepeatableAssignments()
    {
        $now = new \DateTime();
        $today = new \DateTime();
        $today = $today->format('Y-m-d');

        $qb = $this->createQueryBuilder('AbstractAssignment');
        $qb
            ->where('AbstractAssignment.snooze_until IS NULL')
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(':now >= AbstractAssignment.start_time')
            ->andWhere(':now <= AbstractAssignment.end_time')
            ->andWhere($qb->expr()->orX(
               'AbstractAssignment.lastSentDate IS NULL',
                'DATE(AbstractAssignment.lastSentDate) != :today'
            ))
            ->andWhere('AbstractAssignment.enabled = 1')
            ->setParameter("now", $now)
            ->setParameter("today", $today);

        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getSnoozedAssignments()
    {
        $now = new \DateTime();
        $qb = $this->createQueryBuilder('AbstractAssignment')
            ->where('AbstractAssignment.snooze_until IS NOT NULL')
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(':now >= AbstractAssignment.start_time')
            ->andWhere(':now <= AbstractAssignment.end_time')
            ->andWhere('AbstractAssignment.snooze_until <= :now')
            ->andWhere('AbstractAssignment.enabled = 1')
            ->setParameter("now", $now);

        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Get list tasks.
     * @param $param
     * @return mixed|string
     */
    public function getListTasksByParam($param) {
        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->leftJoin('AbstractAssignment.answers', 'an');

        if(!empty($param['company'])) {
            $qb->innerJoin('b.company', 'c')
                ->andWhere('c.id = :company')->setParameter(':company', $param['company']);
        }
        if(!empty($param['branch'])) {
            $qb->andWhere("bs.branch = :branch")
                ->setParameter('branch', $param['branch']);
        }
        if(!empty($param['role'])) {
            $qb->andWhere("AbstractAssignment.role = :role")
                ->setParameter('role', $param['role']);
        }
        if(!empty($param['employee'])) {
            $qb->andWhere("an.employee = :employee")
                ->setParameter('employee', $param['employee']);
        }
        if(!empty($param['answer'])) {
            $qb->andWhere("an.assignment = AbstractAssignment.id");
        }
        if(!empty($param['not_answer'])) {
            $qb->andWhere("an.assignment IS NULL");
        }
        if(!empty($param['date_start'])) {
            $qb->andWhere('DATE(:date_start) = DATE(AbstractAssignment.start_time)')
                ->setParameter(':date_start', $param['date_start']);
        }
        if(!empty($param['date_time_start'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, :date_time_start, AbstractAssignment.start_time) >= 0")
                ->setParameter('date_time_start', $param['date_time_start']);
        }
        if(!empty($param['start_time_answer'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, :start_time_answer, an.created) >= 0")
                ->setParameter('start_time_answer', $param['start_time_answer']);
        }
        if(!empty($param['date_time_end'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.start_time, :date_time_end) >= 0")
                ->setParameter('date_time_end', $param['date_time_end']);
        }
        if(!empty($param['end_time_answer'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, an.created, :end_time_answer) >= 0")
                ->setParameter('end_time_answer', $param['end_time_answer']);
        }
        if(!empty($param['date_time_end_current'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.date_start, :date_time_end_current) >= 0 ")
                ->setParameter('date_time_end_current', $param['date_time_end_current']);
        }
        if(!empty($param['end_time_current_answer'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, an.created, :end_time_current_answer) >= 0")
                ->setParameter('end_time_current_answer', $param['end_time_current_answer']);
        }
        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * Get list pending tasks.
     * @param $param
     * @return mixed|string
     */
    public function getListPendingTasks($param) {
        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->innerJoin('bs.branch', 's')
            ->leftJoin('AbstractAssignment.answers', 'an');

        if(!empty($param['branch'])) {
            $qb->andWhere("bs.branch = :branch")
                ->setParameter('branch', $param['branch']);
        }

        if(!empty($param['date_time_start'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, :date_time_start, AbstractAssignment.start_time) >= 0")
                ->setParameter('date_time_start', $param['date_time_start']);
        }

        if(!empty($param['date_time_end'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.start_time, :date_time_end)  >= 0")
                ->setParameter('date_time_end', $param['date_time_end']);
        }

        $qb->andWhere("an.assignment IS NULL")
            ->andWhere("AbstractAssignment.snooze_until IS NOT NULL");

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * @param AbstractBranchStationRole $role
     * @param BranchShift $shift
     * @return mixed
    */
    public function getPendingTasksByRole(AbstractBranchStationRole $role, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->leftJoin('AbstractAssignment.answers', 'an');
        $qb->andWhere("an.assignment IS NULL");
        $qb->andWhere("r = :role")
            ->setParameter('role', $role);
        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(":now >= AbstractAssignment.start_time AND :now <= AbstractAssignment.end_time")
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getDoneTasksByRole(AbstractBranchStationRole $role, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');
        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('AbstractAssignment.answers', 'an');
        $qb->andWhere('r = :role')
            ->setParameter('role', $role);
        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(":now >= :start_time AND :now <= :end_time")
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);


        $query = $qb->getQuery();
        $qb->andWhere("AbstractAssignment.enabled = 1");

        return $query->getResult();
    }

    public function getFutureTasksByRole(AbstractBranchStationRole $role, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->leftJoin('AbstractAssignment.answers', 'an');
        $qb->andWhere("an.assignment IS NULL");
        $qb->andWhere('r = :role')
            ->setParameter('role', $role);
        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(':now <= AbstractAssignment.start_time')
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getProblemsTasksByRole(AbstractBranchStationRole $role, BranchShift $shift) {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->leftJoin('AbstractAssignment.answers', 'an');

        $qb->andWhere('r = :role')
            ->setParameter('role', $role);

        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(':now > AbstractAssignment.end_time')
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);

        $qb->andWhere("an.assignment IS NULL")
            ->andWhere("AbstractAssignment.snooze_until IS NULL");

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getAllTasksByRole(AbstractBranchStationRole $role, BranchShift $shift, bool $future = false) {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->leftJoin('AbstractAssignment.answers', 'an');

        $qb->andWhere('r = :role')
            ->setParameter('role', $role);

        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.start_time, AbstractAssignment.end_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->setParameter('start_time', $shift_date_start);

        if($future) {
            $qb->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.end_time, :end_time) >= 0 ")
                ->setParameter('end_time', $shift_date_end);
        } else {
            $qb->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.start_time, :now) >= 0 ")
                ->andWhere("TIMESTAMPDIFF(second, :now, AbstractAssignment.end_time) >= 0 ")
                ->setParameter("now", $now);
        }

        $qb->andWhere("AbstractAssignment.enabled = 1");

        $qb->orderBy('AbstractAssignment.start_time', 'ASC');

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getPendingTasksByStation(BranchStation $station, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->leftJoin('AbstractAssignment.answers', 'an');

        $qb->andWhere("an.assignment IS NULL");

        $qb->andWhere("r.branch_station = :station")
            ->setParameter('station', $station);
        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(':now >= AbstractAssignment.start_time')
            ->andWhere(':now <= AbstractAssignment.end_time')
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getDoneTasksByStation(BranchStation $station, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');
        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->innerJoin('AbstractAssignment.answers', 'an');
        $qb->andWhere("r.branch_station = :station")
            ->setParameter('station', $station);
        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(":now >= :start_time AND :now <= :end_time")
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);


        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getProblemsTasksByStation(BranchStation $station, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->leftJoin('AbstractAssignment.answers', 'an');

        $qb->andWhere("r.branch_station = :station")
            ->setParameter('station', $station);

        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(':now > AbstractAssignment.end_time')
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);

        $qb->andWhere("an.assignment IS NULL")
            ->andWhere("AbstractAssignment.snooze_until IS NULL");

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getFutureTasksByStation(BranchStation $station, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->leftJoin('AbstractAssignment.answers', 'an');

        $qb->andWhere("an.assignment IS NULL");

        $qb->andWhere("r.branch_station = :station")
            ->setParameter('station', $station);
        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere("DATE(AbstractAssignment.start_time) = DATE(:now)")
            ->andWhere(':now <= AbstractAssignment.start_time')
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);


        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getFutureTasksByBranch(Branch $branch, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->leftJoin('AbstractAssignment.answers', 'an');

        $qb->andWhere("an.assignment IS NULL");

        $qb->andWhere("bs.branch = :branch")
            ->setParameter('branch', $branch);
        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere("DATE(AbstractAssignment.start_time) = DATE(:now)")
            ->andWhere(':now <= AbstractAssignment.start_time')
            ->andWhere(":now >= :start_time AND :now <= :end_time")
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getDoneTasksByBranch(Branch $branch, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');
        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->innerJoin('AbstractAssignment.answers', 'an');
        $qb->andWhere("bs.branch = :branch")
            ->setParameter('branch', $branch);
        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(":now >= :start_time AND :now <= :end_time")
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);


        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getPendingTasksByBranch(Branch $branch, BranchShift $shift)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->leftJoin('AbstractAssignment.answers', 'an');

        $qb->andWhere("an.assignment IS NULL");

        $qb->andWhere("bs.branch = :branch")
            ->setParameter('branch', $branch);
        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere(':now >= AbstractAssignment.start_time')
            ->andWhere(':now <= AbstractAssignment.end_time')
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
            ->setParameter('start_time', $shift_date_start)
            ->setParameter('end_time', $shift_date_end)
            ->setParameter("now", $now);

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function getAllTasksByStation(BranchStation $station, BranchShift $shift, bool $future = false)
    {
        $now = new \DateTime();

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs');

        $qb->andWhere("r.branch_station = :station")
            ->setParameter('station', $station);

        $qb
            ->andWhere('AbstractAssignment.start_time IS NOT NULL')
            ->andWhere('AbstractAssignment.end_time IS NOT NULL')
            ->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.start_time, AbstractAssignment.end_time) >= 0 ")
            ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
            ->setParameter('start_time', $shift_date_start);

        if($future) {
            $qb->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.end_time, :end_time) >= 0 ")
                ->setParameter('end_time', $shift_date_end);
        } else {
            $qb->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.start_time, :now) >= 0 ")
                ->andWhere("TIMESTAMPDIFF(second, :now, AbstractAssignment.end_time) >= 0 ")
                ->setParameter("now", $now);
        }
        $qb->andWhere("AbstractAssignment.enabled = 1");
        $qb->orderBy('AbstractAssignment.start_time', 'ASC');

        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * Get list problems tasks.
     * @param $param
     * @return mixed|string
     */
    public function getListProblemsTasks($param) {
        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->innerJoin('bs.branch', 's')
            ->leftJoin('AbstractAssignment.answers', 'an');

        if(!empty($param['branch'])) {
            $qb->andWhere("bs.branch = :branch")
                ->setParameter('branch', $param['branch']);
        }

        if(!empty($param['date_time_start'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, :date_time_start, AbstractAssignment.start_time) >= 0")
                ->setParameter('date_time_start', $param['date_time_start']);
        }

        if(!empty($param['date_time_end'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, AbstractAssignment.end_time, :date_time_end) >= 0")
                ->setParameter('date_time_end', $param['date_time_end']);
        }

        $qb->andWhere("an.assignment IS NULL")
            ->andWhere("AbstractAssignment.snooze_until IS NULL");

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getCountTasksByCompany(Company $company)
    {
        $count = 0;
        foreach ($company->getBranches() as $branch)
        {
            /** @var $branch Branch*/
            foreach($branch->getStations() as $station)
            {
                /** @var $station BranchStation*/
                foreach($station->getRoles() as $role)
                {
                   $count += $role->getAssignments()->count();
                }
            }

        }
        return $count;
    }

    public function getTasksByStation(BranchStation $station, BranchShift $shift = null, $has_answers = false)
    {
        $now = new \DateTime(date("Y-m-d"));

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->innerJoin('AbstractAssignment.role', 'r')
            ->innerJoin('r.branch_station', 'bs')
            ->leftJoin('AbstractAssignment.answers', 'an');

        if(!empty($station)) {
            $qb->andWhere("r.branch_station = :station")
                ->setParameter('station', $station);
        }

        if(!empty($shift)) {
            $qb
                ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
                ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
                ->andWhere("TIMESTAMPDIFF(second, :now, :shift_end) <= 0 ")
                ->setParameter('now',$now)
                ->setParameter('start_time', $shift_date_start)
                ->setParameter('end_time', $now)
                ->setParameter('shift_end', $shift_date_end);
        }


        if($has_answers === false) {
            $qb->andWhere("an.assignment IS NULL");
        } else {
            $qb->andWhere("an.assignment = AbstractAssignment.id");
        }

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getTasksByRole(AbstractBranchStationRole $role, BranchShift $shift = null, $has_answers = false)
    {
        $now = new \DateTime(date("Y-m-d"));

        $shift_date_start = new \DateTime();
        $shift_date_start->setTime("{$shift->getTimeOpen()->format('H')}",
            "{$shift->getTimeOpen()->format('i')}", "{$shift->getTimeOpen()->format('s')}");
        $shift_date_end = new \DateTime();
        $shift_date_end->setTime("{$shift->getTimeClose()->format('H')}",
            "{$shift->getTimeClose()->format('i')}", "{$shift->getTimeClose()->format('s')}");

        if($shift->getTimeOpen() > $shift->getTimeClose()) {
            $shift_date_end->modify("+1 day");
        }

        $qb = $this->createQueryBuilder('AbstractAssignment');

        $qb->leftJoin('AbstractAssignment.answers', 'an');

        if(!empty($role)) {
            $qb->andWhere("AbstractAssignment.role = :role")
                ->setParameter('role', $role);
        }

        if(!empty($shift)) {
            $qb
                ->andWhere("TIMESTAMPDIFF(second, :start_time, AbstractAssignment.start_time) >= 0 ")
                ->andWhere("TIMESTAMPDIFF(second, :end_time, AbstractAssignment.start_time) <= 0 ")
                ->andWhere("TIMESTAMPDIFF(second, :now, :shift_end) <= 0 ")
                ->setParameter('now',$now)
                ->setParameter('start_time', $shift_date_start)
                ->setParameter('end_time', $now)
                ->setParameter('shift_end', $shift_date_end);
        }


        if($has_answers === false) {
            $qb->andWhere("an.assignment IS NULL");
        } else {
            $qb->andWhere("an.assignment = AbstractAssignment.id");
        }

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getTasksByRolePeriod(AbstractBranchStationRole $role, $date_start, $date_end)
    {
        $qb = $this->createQueryBuilder('AbstractAssignment');

        if(!empty($role)) {
            $qb->andWhere("AbstractAssignment.role = :role")
                ->setParameter('role', $role);
        }

        $qb->andWhere('TIMESTAMPDIFF(second, :date_start, AbstractAssignment.start_time) >= 0')
            ->andWhere('TIMESTAMPDIFF(second, AbstractAssignment.start_time, :date_end) >= 0')
            ->setParameter('date_start', $date_start)
            ->setParameter('date_end', $date_end);

        $qb->andWhere("AbstractAssignment.enabled = 1");
        $query = $qb->getQuery();
        return $query->getResult();
    }
}
