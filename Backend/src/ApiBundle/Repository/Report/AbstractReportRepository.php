<?php

namespace ApiBundle\Repository\Report;

use ApiBundle\Entity\Branch;
use ApiBundle\Entity\BranchShift;
use ApiBundle\Entity\Company;

/**
 * AbstractReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AbstractReportRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get the list reports which were made in shift.
     * @param BranchShift $shift
     * @param $param
     * @return mixed
     */
    public function getReportsByShift($shift, $param) {
        $qb = $this->createQueryBuilder('Report');
        $qb->andWhere('Report.branch_shift = :shift')->setParameter('shift', $shift);
        if(!empty($param['created'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, :created, Report.created) >= 0 ")
                ->setParameter('created', $param['created']);
        }
        if(!empty($param['updated'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, Report.created, :updated) >= 0 ")
                ->setParameter('updated', $param['updated']);
        }

        if(!empty($param['base_report'])) {
            $qb->andWhere("Report INSTANCE OF ApiBundle\Entity\Report\ProblemReport 
                or Report INSTANCE OF ApiBundle\Entity\Report\CashierReport 
                or Report INSTANCE OF ApiBundle\Entity\Report\CommodityReport");
        }

        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * Get the list reports which were made in today by company.
     * @param Company $company
     * @param $param
     * @return mixed
     */
    public function getReportsByCompany($company, $param)
    {
        $qb = $this->createQueryBuilder('Report')
            ->innerJoin('Report.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->innerJoin('b.company', 'c')
            ->andWhere('c.id = :company')->setParameter(':company', $company);

        if(!empty($param['created'])) {
            $qb->andWhere("DATE(:created) = DATE(Report.created)")
                ->setParameter('created', $param['created']);
        }
        if(!empty($param['updated'])) {
            $qb->andWhere("TIMESTAMPDIFF(second, Report.created, :updated) >= 0 ")
                ->setParameter('updated', $param['updated']);
        }

        if(!empty($param['base_report'])) {
            $qb->andWhere("Report INSTANCE OF ApiBundle\Entity\Report\ProblemReport 
                or Report INSTANCE OF ApiBundle\Entity\Report\CashierReport 
                or Report INSTANCE OF ApiBundle\Entity\Report\CommodityReport");
        }

        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * Get the list reports which were made in together by branch.
     * @param Branch $branch
     * @param $param
     * @return mixed
     */
    public function getReportsByParam($branch, $param)
    {
        $qb = $this->createQueryBuilder('Report')
            ->innerJoin('Report.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b');
        $qb->andWhere('b.id = :branch')->setParameter(':branch', $branch);

        if(!empty($param['date'])) {
            $qb->andWhere('DATE(:date) = DATE(Report.created)')->setParameter(':date', $param['date']);
        }

        if(!empty($param['base_report'])) {
            $qb->andWhere("Report INSTANCE OF ApiBundle\Entity\Report\ProblemReport
                or Report INSTANCE OF ApiBundle\Entity\Report\CommodityReport");
        }

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getCompanyReports(Company $company, $type = null, $all = false, $managers = null,
                                      $branches = null, $regions = null, $from_datetime = null, $to_datetime = null)
    {
        switch ($type)
        {
            case 'cashier':
                $report_type = 'ApiBundle\Entity\Report\CashierReport';
                break;
            case 'commodity':
                $report_type = 'ApiBundle\Entity\Report\CommodityReport';
                break;
            case 'problem':
                $report_type = 'ApiBundle\Entity\Report\ProblemReport';
                break;
            case 'eos':
                $report_type = 'ApiBundle\Entity\Report\EndOfShiftReport';
                break;
            default:
                $report_type = null;
                break;
        }
        $qb = $this->createQueryBuilder('Report');
        $qb
            ->innerJoin('Report.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->innerJoin('b.branch_manager', 'bm')
            ->innerJoin('b.geographical_area', 'ga')
            ->innerJoin('b.company', 'c')
            ->andWhere('c.id = :company')->setParameter(':company', $company)
            ->andWhere('Report.archive = 0');
            if(!is_null($report_type)) {
                $qb->andWhere('Report INSTANCE OF ' . $report_type);
            }
            else
            {
                $qb->andWhere($qb->expr()->orX(

                    $qb->expr()->isInstanceOf('Report','ApiBundle\Entity\Report\ProblemReport'),
                    $qb->expr()->isInstanceOf('Report','ApiBundle\Entity\Report\CommodityReport'),
                    $qb->expr()->isInstanceOf('Report','ApiBundle\Entity\Report\EndOfShiftReport')
                ));
            }
        if($from_datetime || $to_datetime) {
            $offset = intval($company->getTimeZone()->getOffset());
            if(!empty($from)) {
                $from = (new \DateTime())->setTimestamp((new \DateTime(date('Y-m-d H:i:s', strtotime($from_datetime))))
                    ->getTimestamp());
                $from = $from->modify("{$offset} hour");
                $qb->andWhere('TIME(Report.created) >= TIME(:from_time)')
                    ->setParameter('from_time', $from->format('Y-m-d H:i:s'));
            }
            if(!empty($to)) {
                $to = (new \DateTime())->setTimestamp((new \DateTime(date('Y-m-d H:i:s', strtotime($to_datetime))))
                    ->getTimestamp());
                $to = $to->modify("{$offset} hour");
                $qb->andWhere('TIME(Report.created) <= TIME(:to_time)')
                    ->setParameter('to_time', $to->format('Y-m-d H:i:s'));
            }

            if(!empty($dates)) {
                foreach ($dates as &$date) {
                    $date = date('Y-m-d', strtotime($date));
                }
                $qb->andWhere($qb->expr()->in('DATE(Report.created)', $dates));
            }
        } elseif(!$all) {
            $qb
                ->andWhere("DATE(:created) = DATE(Report.created)")
                ->setParameter('created', date('Y-m-d H:i:s'));
        }
        if(!empty($branches)) {
            $qb->andWhere($qb->expr()->in('b.id', $branches));
        }
        if(!empty($managers)) {
            $qb->andWhere($qb->expr()->in('bm.id', $managers));
        }
        if(!empty($regions)) {
            $qb->andWhere($qb->expr()->in('ga.region', $regions));
        }
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getArchivedCompanyReports(Company $company, $type = null, $all = false, $managers = null, $branches = null, $regions = null)
    {
        switch ($type)
        {
            case 'cashier':
                $report_type = 'ApiBundle\Entity\Report\CashierReport';
                break;
            case 'commodity':
                $report_type = 'ApiBundle\Entity\Report\CommodityReport';
                break;
            case 'problem':
                $report_type = 'ApiBundle\Entity\Report\ProblemReport';
                break;
            case 'eos':
                $report_type = 'ApiBundle\Entity\Report\EndOfShiftReport';
                break;
            default:
                $report_type = null;
                break;
        }
        $qb = $this->createQueryBuilder('Report');
        $qb
            ->innerJoin('Report.branch_shift', 'bs')
            ->innerJoin('bs.branch', 'b')
            ->innerJoin('b.branch_manager', 'bm')
            ->innerJoin('b.geographical_area', 'ga')
            ->innerJoin('b.company', 'c')
            ->andWhere('c.id = :company')->setParameter(':company', $company)
            ->andWhere('Report.archive = 1');
            if(!is_null($report_type)) {
                $qb->andWhere('Report INSTANCE OF ' . $report_type);
            } else {
                $qb->andWhere($qb->expr()->orX(

                    $qb->expr()->isInstanceOf('Report','ApiBundle\Entity\Report\ProblemReport'),
                    $qb->expr()->isInstanceOf('Report','ApiBundle\Entity\Report\CommodityReport'),
                    $qb->expr()->isInstanceOf('Report','ApiBundle\Entity\Report\EndOfShiftReport')
                ));
            }
        if(!$all) {
            $qb
                ->andWhere("DATE(:created) = DATE(Report.created)")
                ->setParameter('created', date('Y-m-d H:i:s'));
        }

        if(!empty($branches)) {
            $qb->andWhere($qb->expr()->in('b.id', $branches));
        }
        if(!empty($managers)) {
            $qb->andWhere($qb->expr()->in('bm.id', $managers));
        }
        if(!empty($regions)) {
            $qb->andWhere($qb->expr()->in('ga.region', $regions));
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }
}
